// Code generated by MockGen. DO NOT EDIT.
// Source: security.go

// Package mock is a generated GoMock package.
package mock

import (
	pki "github.com/baetyl/baetyl-go/v2/pki"
	security "github.com/baetyl/baetyl/v2/security"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSecurity is a mock of Security interface
type MockSecurity struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityMockRecorder
}

// MockSecurityMockRecorder is the mock recorder for MockSecurity
type MockSecurityMockRecorder struct {
	mock *MockSecurity
}

// NewMockSecurity creates a new mock instance
func NewMockSecurity(ctrl *gomock.Controller) *MockSecurity {
	mock := &MockSecurity{ctrl: ctrl}
	mock.recorder = &MockSecurityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurity) EXPECT() *MockSecurityMockRecorder {
	return m.recorder
}

// GetCA mocks base method
func (m *MockSecurity) GetCA() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCA")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCA indicates an expected call of GetCA
func (mr *MockSecurityMockRecorder) GetCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCA", reflect.TypeOf((*MockSecurity)(nil).GetCA))
}

// IssueCertificate mocks base method
func (m *MockSecurity) IssueCertificate(cn string, alt security.AltNames) (*pki.CertPem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", cn, alt)
	ret0, _ := ret[0].(*pki.CertPem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate
func (mr *MockSecurityMockRecorder) IssueCertificate(cn, alt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockSecurity)(nil).IssueCertificate), cn, alt)
}

// RevokeCertificate mocks base method
func (m *MockSecurity) RevokeCertificate(cn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificate", cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeCertificate indicates an expected call of RevokeCertificate
func (mr *MockSecurityMockRecorder) RevokeCertificate(cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificate", reflect.TypeOf((*MockSecurity)(nil).RevokeCertificate), cn)
}

// RotateCertificate mocks base method
func (m *MockSecurity) RotateCertificate(cn string) (*pki.CertPem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateCertificate", cn)
	ret0, _ := ret[0].(*pki.CertPem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateCertificate indicates an expected call of RotateCertificate
func (mr *MockSecurityMockRecorder) RotateCertificate(cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateCertificate", reflect.TypeOf((*MockSecurity)(nil).RotateCertificate), cn)
}
