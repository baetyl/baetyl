// Code generated by MockGen. DO NOT EDIT.
// Source: chain.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChain is a mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockChain) Debug() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(error)
	return ret0
}

// Debug indicates an expected call of Debug
func (mr *MockChainMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockChain)(nil).Debug))
}

// ViewLogs mocks base method
func (m *MockChain) ViewLogs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewLogs")
	ret0, _ := ret[0].(error)
	return ret0
}

// ViewLogs indicates an expected call of ViewLogs
func (mr *MockChainMockRecorder) ViewLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewLogs", reflect.TypeOf((*MockChain)(nil).ViewLogs))
}

// Close mocks base method
func (m *MockChain) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockChainMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChain)(nil).Close))
}
