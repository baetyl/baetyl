// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl/sync (interfaces: Sync)

// Package mock is a generated GoMock package.
package mock

import (
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSync is a mock of Sync interface
type MockSync struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMockRecorder
}

// MockSyncMockRecorder is the mock recorder for MockSync
type MockSyncMockRecorder struct {
	mock *MockSync
}

// NewMockSync creates a new mock instance
func NewMockSync(ctrl *gomock.Controller) *MockSync {
	mock := &MockSync{ctrl: ctrl}
	mock.recorder = &MockSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSync) EXPECT() *MockSyncMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSync) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSyncMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSync)(nil).Close))
}

// Report mocks base method
func (m *MockSync) Report(arg0 v1.Report) (v1.Desire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", arg0)
	ret0, _ := ret[0].(v1.Desire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report
func (mr *MockSyncMockRecorder) Report(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockSync)(nil).Report), arg0)
}

// Start mocks base method
func (m *MockSync) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockSyncMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSync)(nil).Start))
}

// SyncApps mocks base method
func (m *MockSync) SyncApps(arg0 []v1.AppInfo) (map[string]v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncApps", arg0)
	ret0, _ := ret[0].(map[string]v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncApps indicates an expected call of SyncApps
func (mr *MockSyncMockRecorder) SyncApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncApps", reflect.TypeOf((*MockSync)(nil).SyncApps), arg0)
}

// SyncResource mocks base method
func (m *MockSync) SyncResource(arg0 v1.AppInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncResource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncResource indicates an expected call of SyncResource
func (mr *MockSyncMockRecorder) SyncResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncResource", reflect.TypeOf((*MockSync)(nil).SyncResource), arg0)
}
