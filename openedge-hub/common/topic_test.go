package common

import (
	"testing"

	"github.com/baidu/openedge/openedge-hub/utils"
	"github.com/stretchr/testify/assert"
)

func TestContainsWildCard(t *testing.T) {
	assert.Equal(t, false, ContainsWildcard("/a/b/c"))
	assert.Equal(t, true, ContainsWildcard("/a/+/c"))
	assert.Equal(t, true, ContainsWildcard("/a/b/#/"))
}

func TestIsSysTopics(t *testing.T) {
	assert.Equal(t, false, isSysTopic("/a/b/c"))
	assert.Equal(t, false, isSysTopic("/+/b/c"))
	assert.Equal(t, false, isSysTopic("/a/+/c"))
	assert.Equal(t, false, isSysTopic("/a/b/+"))
	assert.Equal(t, false, isSysTopic("/+/b/#/"))
	assert.Equal(t, false, isSysTopic("/+"))
	assert.Equal(t, false, isSysTopic("+"))
	assert.Equal(t, false, isSysTopic("/#"))
	assert.Equal(t, false, isSysTopic("#"))

	assert.Equal(t, true, isSysTopic("$"))
	assert.Equal(t, true, isSysTopic("$/"))
	assert.Equal(t, true, isSysTopic("$$"))
	assert.Equal(t, true, isSysTopic("$+"))
	assert.Equal(t, true, isSysTopic("$#"))
	assert.Equal(t, true, isSysTopic("$/$"))
	assert.Equal(t, false, isSysTopic("/$"))
	assert.Equal(t, false, isSysTopic("/$$"))
	assert.Equal(t, true, isSysTopic("$baidu"))
	assert.Equal(t, true, isSysTopic("$baidu/"))
	assert.Equal(t, true, isSysTopic("$baidu/iot/device"))
	assert.Equal(t, true, isSysTopic("$SYS"))
	assert.Equal(t, true, isSysTopic("$SYS/"))
	assert.Equal(t, true, isSysTopic("$SYS/iot/device"))
	assert.Equal(t, true, isSysTopic("$function"))
	assert.Equal(t, true, isSysTopic("$funciton/"))
	assert.Equal(t, true, isSysTopic("$function/iot/device"))
	assert.Equal(t, true, isSysTopic("$cloud"))
	assert.Equal(t, true, isSysTopic("$cloud/"))
	assert.Equal(t, true, isSysTopic("$cloud/iot/device"))
}

func TestGetTopicSubjects(t *testing.T) {
	subjects := getTopicSubjects("/a/+/#")
	assert.Equal(t, 4, len(subjects))
	assert.Equal(t, "", subjects[0].getValue())
	assert.IsType(t, normalSubject{}, subjects[0])
	assert.Equal(t, "a", subjects[1].getValue())
	assert.IsType(t, normalSubject{}, subjects[1])
	assert.Equal(t, "+", subjects[2].getValue())
	assert.IsType(t, singleWildcardSubject{}, subjects[2])
	assert.Equal(t, "#", subjects[3].getValue())
	assert.IsType(t, multipleWildcardSubject{}, subjects[3])
}

func TestTopicIsMatch(t *testing.T) {
	assert.Equal(t, true, TopicIsMatch("a", "a"))
	assert.Equal(t, false, TopicIsMatch("a", "/"))
	assert.Equal(t, true, TopicIsMatch("a", "+"))
	assert.Equal(t, true, TopicIsMatch("a", "#"))
	assert.Equal(t, true, TopicIsMatch("a/", "#"))
	assert.Equal(t, true, TopicIsMatch("a/", "a/"))
	assert.Equal(t, false, TopicIsMatch("a/", "a/b"))
	assert.Equal(t, true, TopicIsMatch("a/", "a/+"))
	assert.Equal(t, true, TopicIsMatch("a/", "a/#"))
	assert.Equal(t, true, TopicIsMatch("/", "#"))
	assert.Equal(t, false, TopicIsMatch("/", "+"))
	assert.Equal(t, true, TopicIsMatch("/", "/"))
	assert.Equal(t, true, TopicIsMatch("/", "/#"))
	assert.Equal(t, true, TopicIsMatch("/", "/+"))
	assert.Equal(t, false, TopicIsMatch("/", "/a"))
	assert.Equal(t, false, TopicIsMatch("/", "/a/b"))
	assert.Equal(t, false, TopicIsMatch("/", "/a/+"))
	assert.Equal(t, false, TopicIsMatch("/", "/a/#"))
	assert.Equal(t, false, TopicIsMatch("/a", "/"))
	assert.Equal(t, true, TopicIsMatch("/a", "/+"))
	assert.Equal(t, true, TopicIsMatch("/a", "/#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/a/b/c"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/a/b/+"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/+/b/+"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/+/b/+"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/+/+/+"))
	assert.Equal(t, false, TopicIsMatch("/a/b/c", "/+/b"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/a/#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/a/#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/a/b/c/#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/+/#"))
	assert.Equal(t, true, TopicIsMatch("/a/b/c", "/+/b/#"))
	assert.Equal(t, false, TopicIsMatch("a", "a/b/#"))
	assert.Equal(t, false, TopicIsMatch("a", "a/b/+"))
	assert.Equal(t, true, TopicIsMatch("/a/b", "/a/b/#"))
	assert.Equal(t, false, TopicIsMatch("/a/b", "/a/b/+"))
}

func TestPubTopicValidate(t *testing.T) {
	// Unicode-null, blank, chinese character validate
	assert.Equal(t, false, PubTopicValidate("\u0000"))
	assert.Equal(t, false, PubTopicValidate(""))
	assert.Equal(t, true, PubTopicValidate(" "))
	assert.Equal(t, true, PubTopicValidate("中国"))
	assert.Equal(t, true, PubTopicValidate("test/中国"))

	// maxTopicLength and maxSlashCount validate
	assert.Equal(t, true, PubTopicValidate(utils.GenRandomStr(255)))
	assert.Equal(t, false, PubTopicValidate(utils.GenRandomStr(256)))
	assert.Equal(t, true, PubTopicValidate("/a/b/c/d/e/f/g/h"))
	assert.Equal(t, false, PubTopicValidate("/a/b/c/d/e/f/g/h/"))
	assert.Equal(t, false, PubTopicValidate("/a/b/c/d/e/f/g/h/i"))

	// sysTopic validate
	assert.Equal(t, false, PubTopicValidate("$"))
	assert.Equal(t, false, PubTopicValidate("$a/"))
	assert.Equal(t, false, PubTopicValidate("$/"))
	assert.Equal(t, false, PubTopicValidate("$/a"))
	assert.Equal(t, false, PubTopicValidate("$$"))
	assert.Equal(t, false, PubTopicValidate("$$/"))
	assert.Equal(t, false, PubTopicValidate("$$/a"))
	assert.Equal(t, false, PubTopicValidate("$#"))
	assert.Equal(t, false, PubTopicValidate("$#/"))
	assert.Equal(t, false, PubTopicValidate("$#/a"))
	assert.Equal(t, false, PubTopicValidate("$+"))
	assert.Equal(t, false, PubTopicValidate("$+/"))
	assert.Equal(t, false, PubTopicValidate("$+/a"))
	assert.Equal(t, false, PubTopicValidate("$baidu"))
	assert.Equal(t, false, PubTopicValidate("$baidu/"))
	assert.Equal(t, false, PubTopicValidate("$baidu/#"))
	assert.Equal(t, false, PubTopicValidate("$baidu/+"))
	assert.Equal(t, false, PubTopicValidate("$baidu/iot/device"))

	// valid topic validate
	assert.Equal(t, true, PubTopicValidate(" /"))
	assert.Equal(t, true, PubTopicValidate("/"))
	assert.Equal(t, true, PubTopicValidate("/ "))
	assert.Equal(t, true, PubTopicValidate("//"))
	assert.Equal(t, true, PubTopicValidate("/$"))
	assert.Equal(t, true, PubTopicValidate("/a"))
	assert.Equal(t, true, PubTopicValidate("/a/"))
	assert.Equal(t, true, PubTopicValidate("/a/b/c"))
	assert.Equal(t, true, PubTopicValidate("/$a"))
	assert.Equal(t, true, PubTopicValidate("/$a/"))
	assert.Equal(t, true, PubTopicValidate("/$a/b/c"))
	assert.Equal(t, true, PubTopicValidate("/a/b/c/"))
	assert.Equal(t, true, PubTopicValidate("/a/b/c"))
	assert.Equal(t, true, PubTopicValidate("a/b/c"))
	assert.Equal(t, true, PubTopicValidate("a/b//c"))
	assert.Equal(t, true, PubTopicValidate("a/b/c/"))

	// invalid topic validate
	assert.Equal(t, false, PubTopicValidate("/+"))
	assert.Equal(t, false, PubTopicValidate("/+/"))
	assert.Equal(t, false, PubTopicValidate("+"))
	assert.Equal(t, false, PubTopicValidate("+/"))
	assert.Equal(t, false, PubTopicValidate("++"))
	assert.Equal(t, false, PubTopicValidate("+#"))
	assert.Equal(t, false, PubTopicValidate("+/a"))
	assert.Equal(t, false, PubTopicValidate("+/+"))
	assert.Equal(t, false, PubTopicValidate("+/#"))
	assert.Equal(t, false, PubTopicValidate("+/a/#"))
	assert.Equal(t, false, PubTopicValidate("#"))
	assert.Equal(t, false, PubTopicValidate("/#"))
	assert.Equal(t, false, PubTopicValidate("/+"))
	assert.Equal(t, false, PubTopicValidate("/a/#"))
	assert.Equal(t, false, PubTopicValidate("/a/+"))
	assert.Equal(t, false, PubTopicValidate("/a/+/"))
	assert.Equal(t, false, PubTopicValidate("/a/+/+"))
	assert.Equal(t, false, PubTopicValidate("/a/+/#"))
	assert.Equal(t, false, PubTopicValidate("/+/b/c/"))
	assert.Equal(t, false, PubTopicValidate("/a/+/c"))
	assert.Equal(t, false, PubTopicValidate("/a/b/+"))
	assert.Equal(t, false, PubTopicValidate("/a+a/b/"))
	assert.Equal(t, false, PubTopicValidate("/a/b+c/"))
	assert.Equal(t, false, PubTopicValidate("/a/#/"))
	assert.Equal(t, false, PubTopicValidate("/a/#/c"))
	assert.Equal(t, false, PubTopicValidate("/a/##"))
	assert.Equal(t, false, PubTopicValidate("/a/#+"))
	assert.Equal(t, false, PubTopicValidate("/a/b#b/c"))
	assert.Equal(t, false, PubTopicValidate("/a/b#b/#"))
	assert.Equal(t, false, PubTopicValidate("/a/b/++"))
	assert.Equal(t, false, PubTopicValidate("/a/b/+#"))
	assert.Equal(t, false, PubTopicValidate("/+/b/#/"))
	assert.Equal(t, false, PubTopicValidate("/+/b/#/a"))
	assert.Equal(t, false, PubTopicValidate("/+/b/#/+"))
	assert.Equal(t, false, PubTopicValidate("/+/b/#/#"))
}

func TestSubTopicValidate(t *testing.T) {
	// Unicode-null, blank, chinese character validate
	assert.Equal(t, false, SubTopicValidate("\u0000"))
	assert.Equal(t, false, SubTopicValidate(""))
	assert.Equal(t, true, SubTopicValidate(" "))
	assert.Equal(t, true, SubTopicValidate("中国"))
	assert.Equal(t, true, SubTopicValidate("test/中国"))

	// maxTopicLength and maxSlashCount validate
	assert.Equal(t, true, SubTopicValidate(utils.GenRandomStr(255)))
	assert.Equal(t, false, SubTopicValidate(utils.GenRandomStr(256)))
	assert.Equal(t, true, SubTopicValidate("/a/b/c/d/e/f/g/h"))
	assert.Equal(t, false, SubTopicValidate("/a/b/c/d/e/f/g/h/"))
	assert.Equal(t, false, SubTopicValidate("/a/b/c/d/e/f/g/h/i"))

	// sysTopic validate
	assert.Equal(t, false, SubTopicValidate("$"))
	assert.Equal(t, false, SubTopicValidate("$a/"))
	assert.Equal(t, false, SubTopicValidate("$/"))
	assert.Equal(t, false, SubTopicValidate("$/a"))
	assert.Equal(t, false, SubTopicValidate("$$"))
	assert.Equal(t, false, SubTopicValidate("$$/"))
	assert.Equal(t, false, SubTopicValidate("$$/a"))
	assert.Equal(t, false, SubTopicValidate("$#"))
	assert.Equal(t, false, SubTopicValidate("$#/"))
	assert.Equal(t, false, SubTopicValidate("$#/a"))
	assert.Equal(t, false, SubTopicValidate("$+"))
	assert.Equal(t, false, SubTopicValidate("$+/"))
	assert.Equal(t, false, SubTopicValidate("$+/a"))
	assert.Equal(t, false, SubTopicValidate("$baidu"))
	assert.Equal(t, false, SubTopicValidate("$baidu/"))
	assert.Equal(t, false, SubTopicValidate("$baidu/#"))
	assert.Equal(t, false, SubTopicValidate("$baidu/+"))
	assert.Equal(t, false, SubTopicValidate("$baidu/iot/device"))

	// valid topic validate
	assert.Equal(t, true, SubTopicValidate(" /"))
	assert.Equal(t, true, SubTopicValidate("/"))
	assert.Equal(t, true, SubTopicValidate("//"))
	assert.Equal(t, true, SubTopicValidate("/+"))
	assert.Equal(t, true, SubTopicValidate("/+/"))
	assert.Equal(t, true, SubTopicValidate("+"))
	assert.Equal(t, true, SubTopicValidate("+/"))
	assert.Equal(t, true, SubTopicValidate("+/a"))
	assert.Equal(t, true, SubTopicValidate("+/+"))
	assert.Equal(t, true, SubTopicValidate("+/#"))
	assert.Equal(t, true, SubTopicValidate("+/a/#"))
	assert.Equal(t, true, SubTopicValidate("#"))
	assert.Equal(t, true, SubTopicValidate("/#"))
	assert.Equal(t, true, SubTopicValidate("/+"))
	assert.Equal(t, true, SubTopicValidate("/$"))
	assert.Equal(t, true, SubTopicValidate("/a"))
	assert.Equal(t, true, SubTopicValidate("/a/"))
	assert.Equal(t, true, SubTopicValidate("/a/b/c"))
	assert.Equal(t, true, SubTopicValidate("/a/#"))
	assert.Equal(t, true, SubTopicValidate("/a/+"))
	assert.Equal(t, true, SubTopicValidate("/a/+/"))
	assert.Equal(t, true, SubTopicValidate("/a/+/+"))
	assert.Equal(t, true, SubTopicValidate("/a/+/#"))
	assert.Equal(t, true, SubTopicValidate("/a/+/b/c"))
	assert.Equal(t, true, SubTopicValidate("/$a"))
	assert.Equal(t, true, SubTopicValidate("/$a/"))
	assert.Equal(t, true, SubTopicValidate("/$a/b/c"))
	assert.Equal(t, true, SubTopicValidate("/a/b/c/"))
	assert.Equal(t, true, SubTopicValidate("/+/b/c"))
	assert.Equal(t, true, SubTopicValidate("/a/+/c"))
	assert.Equal(t, true, SubTopicValidate("/a/b/+"))
	assert.Equal(t, true, SubTopicValidate("+/a/b"))
	assert.Equal(t, true, SubTopicValidate("a/+/b"))
	assert.Equal(t, true, SubTopicValidate("a/b/+"))

	// invalid topic validate
	assert.Equal(t, false, SubTopicValidate("/a+a/b/"))
	assert.Equal(t, false, SubTopicValidate("/a/b+c/"))
	assert.Equal(t, false, SubTopicValidate("/a/#/"))
	assert.Equal(t, false, SubTopicValidate("/a/#/c"))
	assert.Equal(t, false, SubTopicValidate("/a/##"))
	assert.Equal(t, false, SubTopicValidate("/a/#+"))
	assert.Equal(t, false, SubTopicValidate("/a/b#b/c"))
	assert.Equal(t, false, SubTopicValidate("/a/b#b/#"))
	assert.Equal(t, false, SubTopicValidate("/a/b/++"))
	assert.Equal(t, false, SubTopicValidate("/a/b/+#"))
	assert.Equal(t, false, SubTopicValidate("/+/b/#/"))
	assert.Equal(t, false, SubTopicValidate("/+/b/#/a"))
	assert.Equal(t, false, SubTopicValidate("/+/b/#/+"))
	assert.Equal(t, false, SubTopicValidate("/+/b/#/#"))
}
