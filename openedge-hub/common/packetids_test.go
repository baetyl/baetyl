package common

import (
	"testing"

	"github.com/256dpi/gomqtt/packet"
	"github.com/stretchr/testify/assert"
)

func TestPacketIDS(t *testing.T) {
	pids := NewPacketIDS()
	for i := 1; i <= 10; i++ {
		msg := new(Message)
		msg.SequenceID = uint64(i)
		msg.SetAcknowledge()
		pid := pids.Set(msg)
		assert.Equal(t, i, int(pid))
	}
	msg := new(Message)
	msg.SequenceID = uint64(0)
	msg.SetAcknowledge()
	pid := pids.Set(msg)
	assert.Equal(t, pids.max, pid)
	msg = new(Message)
	msg.SequenceID = uint64(1)
	msg.SetAcknowledge()
	pid = pids.Set(msg)
	assert.Equal(t, pids.max-1, pid)
	msg = new(Message)
	msg.SequenceID = uint64(65535)
	msg.SetAcknowledge()
	pid = pids.Set(msg)
	assert.Equal(t, pids.max-2, pid)
	msg = new(Message)
	msg.SequenceID = uint64(65536)
	msg.SetAcknowledge()
	pid = pids.Set(msg)
	assert.Equal(t, pids.max-3, pid)
	msg = new(Message)
	msg.SequenceID = uint64(65556)
	msg.SetAcknowledge()
	pid = pids.Set(msg)
	assert.Equal(t, packet.ID(20), pid)
	msg = new(Message)
	msg.SequenceID = uint64(65557)
	msg.SetAcknowledge()
	pid = pids.Set(msg)
	assert.Equal(t, packet.ID(21), pid)
	assert.Equal(t, 16, pids.Size())
	assert.Len(t, pids.reindex, 4)
	pid = pids.Get(pids.index[10].SID())
	assert.Equal(t, packet.ID(10), pid)
	pids.Ack(pid)
	assert.Equal(t, 15, pids.Size())
	assert.Len(t, pids.reindex, 4)
	pid = pids.Get(pids.index[pids.max-3].SID())
	assert.Equal(t, pids.max-3, pid)
	pids.Ack(pid)
	assert.Equal(t, 14, pids.Size())
	assert.Len(t, pids.reindex, 3)
	pid = pids.Get(pids.index[20].SID())
	assert.Equal(t, packet.ID(20), pid)
	pids.Ack(pid)
	assert.Equal(t, 13, pids.Size())
	assert.Len(t, pids.reindex, 3)
	pid = pids.Get(60)
	assert.Equal(t, packet.ID(0), pid)
	pid = pids.Get(53621631)
	assert.Equal(t, packet.ID(0), pid)
}
