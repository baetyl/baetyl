// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl/sdk/baetyl-go (interfaces: Context)

// Package baetyl is a generated GoMock package.
package baetyl

import (
	logger "github.com/baetyl/baetyl/logger"
	mqtt "github.com/baetyl/baetyl/protocol/mqtt"
	baetyl_go "github.com/baetyl/baetyl/sdk/baetyl-go"
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockContext) Config() *baetyl_go.ServiceConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*baetyl_go.ServiceConfig)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockContextMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockContext)(nil).Config))
}

// GetAvailablePort mocks base method
func (m *MockContext) GetAvailablePort() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePort")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePort indicates an expected call of GetAvailablePort
func (mr *MockContextMockRecorder) GetAvailablePort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePort", reflect.TypeOf((*MockContext)(nil).GetAvailablePort))
}

// InspectSystem mocks base method
func (m *MockContext) InspectSystem() (*baetyl_go.Inspect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectSystem")
	ret0, _ := ret[0].(*baetyl_go.Inspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectSystem indicates an expected call of InspectSystem
func (mr *MockContextMockRecorder) InspectSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectSystem", reflect.TypeOf((*MockContext)(nil).InspectSystem))
}

// IsNative mocks base method
func (m *MockContext) IsNative() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNative")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNative indicates an expected call of IsNative
func (mr *MockContextMockRecorder) IsNative() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNative", reflect.TypeOf((*MockContext)(nil).IsNative))
}

// LoadConfig mocks base method
func (m *MockContext) LoadConfig(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig
func (mr *MockContextMockRecorder) LoadConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockContext)(nil).LoadConfig), arg0)
}

// Log mocks base method
func (m *MockContext) Log() logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockContextMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockContext)(nil).Log))
}

// NewHubClient mocks base method
func (m *MockContext) NewHubClient(arg0 string, arg1 []mqtt.TopicInfo) (*mqtt.Dispatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHubClient", arg0, arg1)
	ret0, _ := ret[0].(*mqtt.Dispatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHubClient indicates an expected call of NewHubClient
func (mr *MockContextMockRecorder) NewHubClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHubClient", reflect.TypeOf((*MockContext)(nil).NewHubClient), arg0, arg1)
}

// ReportInstance mocks base method
func (m *MockContext) ReportInstance(arg0 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportInstance indicates an expected call of ReportInstance
func (mr *MockContextMockRecorder) ReportInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportInstance", reflect.TypeOf((*MockContext)(nil).ReportInstance), arg0)
}

// StartInstance mocks base method
func (m *MockContext) StartInstance(arg0, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartInstance indicates an expected call of StartInstance
func (mr *MockContextMockRecorder) StartInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockContext)(nil).StartInstance), arg0, arg1, arg2)
}

// StopInstance mocks base method
func (m *MockContext) StopInstance(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstance indicates an expected call of StopInstance
func (mr *MockContextMockRecorder) StopInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockContext)(nil).StopInstance), arg0, arg1)
}

// UpdateSystem mocks base method
func (m *MockContext) UpdateSystem(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSystem indicates an expected call of UpdateSystem
func (mr *MockContextMockRecorder) UpdateSystem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystem", reflect.TypeOf((*MockContext)(nil).UpdateSystem), arg0, arg1, arg2)
}

// Wait mocks base method
func (m *MockContext) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockContextMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockContext)(nil).Wait))
}

// WaitChan mocks base method
func (m *MockContext) WaitChan() <-chan os.Signal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitChan")
	ret0, _ := ret[0].(<-chan os.Signal)
	return ret0
}

// WaitChan indicates an expected call of WaitChan
func (mr *MockContextMockRecorder) WaitChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitChan", reflect.TypeOf((*MockContext)(nil).WaitChan))
}
